// Code generated by MockGen. DO NOT EDIT.
// Source: webpage_analyzer_service.go
//
// Generated by this command:
//
//	mockgen -source=webpage_analyzer_service.go -destination=webpage_analyzer_service_mock.go -package=service
//

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	model "github.com/shashikedissanayake/web-page-analyzer/server/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIWebPageAnalyzerService is a mock of IWebPageAnalyzerService interface.
type MockIWebPageAnalyzerService struct {
	ctrl     *gomock.Controller
	recorder *MockIWebPageAnalyzerServiceMockRecorder
	isgomock struct{}
}

// MockIWebPageAnalyzerServiceMockRecorder is the mock recorder for MockIWebPageAnalyzerService.
type MockIWebPageAnalyzerServiceMockRecorder struct {
	mock *MockIWebPageAnalyzerService
}

// NewMockIWebPageAnalyzerService creates a new mock instance.
func NewMockIWebPageAnalyzerService(ctrl *gomock.Controller) *MockIWebPageAnalyzerService {
	mock := &MockIWebPageAnalyzerService{ctrl: ctrl}
	mock.recorder = &MockIWebPageAnalyzerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWebPageAnalyzerService) EXPECT() *MockIWebPageAnalyzerServiceMockRecorder {
	return m.recorder
}

// AnalyzeWebPage mocks base method.
func (m *MockIWebPageAnalyzerService) AnalyzeWebPage(arg0 string) (*model.AnalyzerResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnalyzeWebPage", arg0)
	ret0, _ := ret[0].(*model.AnalyzerResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnalyzeWebPage indicates an expected call of AnalyzeWebPage.
func (mr *MockIWebPageAnalyzerServiceMockRecorder) AnalyzeWebPage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyzeWebPage", reflect.TypeOf((*MockIWebPageAnalyzerService)(nil).AnalyzeWebPage), arg0)
}
