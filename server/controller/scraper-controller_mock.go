// Code generated by MockGen. DO NOT EDIT.
// Source: scraper-controller.go
//
// Generated by this command:
//
//	mockgen -source=scraper-controller.go -destination=scraper-controller_mock.go -package=controller
//

// Package controller is a generated GoMock package.
package controller

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIScraperController is a mock of IScraperController interface.
type MockIScraperController struct {
	ctrl     *gomock.Controller
	recorder *MockIScraperControllerMockRecorder
	isgomock struct{}
}

// MockIScraperControllerMockRecorder is the mock recorder for MockIScraperController.
type MockIScraperControllerMockRecorder struct {
	mock *MockIScraperController
}

// NewMockIScraperController creates a new mock instance.
func NewMockIScraperController(ctrl *gomock.Controller) *MockIScraperController {
	mock := &MockIScraperController{ctrl: ctrl}
	mock.recorder = &MockIScraperControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIScraperController) EXPECT() *MockIScraperControllerMockRecorder {
	return m.recorder
}

// ScrapeWebPage mocks base method.
func (m *MockIScraperController) ScrapeWebPage(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ScrapeWebPage", arg0, arg1)
}

// ScrapeWebPage indicates an expected call of ScrapeWebPage.
func (mr *MockIScraperControllerMockRecorder) ScrapeWebPage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScrapeWebPage", reflect.TypeOf((*MockIScraperController)(nil).ScrapeWebPage), arg0, arg1)
}
