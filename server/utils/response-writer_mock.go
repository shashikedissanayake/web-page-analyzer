// Code generated by MockGen. DO NOT EDIT.
// Source: response-writer.go
//
// Generated by this command:
//
//	mockgen -source=response-writer.go -destination=response-writer_mock.go -package=utils
//

// Package utils is a generated GoMock package.
package utils

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIResponseWriter is a mock of IResponseWriter interface.
type MockIResponseWriter struct {
	ctrl     *gomock.Controller
	recorder *MockIResponseWriterMockRecorder
	isgomock struct{}
}

// MockIResponseWriterMockRecorder is the mock recorder for MockIResponseWriter.
type MockIResponseWriterMockRecorder struct {
	mock *MockIResponseWriter
}

// NewMockIResponseWriter creates a new mock instance.
func NewMockIResponseWriter(ctrl *gomock.Controller) *MockIResponseWriter {
	mock := &MockIResponseWriter{ctrl: ctrl}
	mock.recorder = &MockIResponseWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIResponseWriter) EXPECT() *MockIResponseWriterMockRecorder {
	return m.recorder
}

// SendErrorResponse mocks base method.
func (m *MockIResponseWriter) SendErrorResponse(arg0 http.ResponseWriter, arg1 int, arg2 string, arg3 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendErrorResponse", arg0, arg1, arg2, arg3)
}

// SendErrorResponse indicates an expected call of SendErrorResponse.
func (mr *MockIResponseWriterMockRecorder) SendErrorResponse(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendErrorResponse", reflect.TypeOf((*MockIResponseWriter)(nil).SendErrorResponse), arg0, arg1, arg2, arg3)
}

// SendSuccessResponse mocks base method.
func (m *MockIResponseWriter) SendSuccessResponse(arg0 http.ResponseWriter, arg1 int, arg2 string, arg3 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendSuccessResponse", arg0, arg1, arg2, arg3)
}

// SendSuccessResponse indicates an expected call of SendSuccessResponse.
func (mr *MockIResponseWriterMockRecorder) SendSuccessResponse(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSuccessResponse", reflect.TypeOf((*MockIResponseWriter)(nil).SendSuccessResponse), arg0, arg1, arg2, arg3)
}
